@_attrs_define
class {{ class_name }}:
    {{ safe_docstring(class_docstring_content(model)) | indent(4) }}

    {% for property in model.required_properties + model.optional_properties %}
    {% if property.default is none and property.required %}
    {{ property.to_string() }}
    {% endif %}
    {% endfor %}
    {% for property in model.required_properties + model.optional_properties %}
    {% if property.default is not none or not property.required %}
    {{ property.to_string() }}
    {% endif %}
    {% endfor %}
    {% if model.additional_properties %}
    additional_properties: Dict[str, {{ additional_property_type }}] = _attrs_field(init=False, factory=dict)
    {% endif %}

    def to_dict(self) -> Dict[str, Any]:
    {% for lazy_import in model.lazy_imports %}
        {{ lazy_import }}
    {% endfor %}
        {{ _to_dict() | indent(8) }}

{% if model.is_multipart_body %}
    def to_multipart(self) -> Dict[str, Any]:
        {{ _to_dict(multipart=True) | indent(8) }}
{% endif %}

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
    {% for lazy_import in model.lazy_imports %}
        {{ lazy_import }}
    {% endfor %}
        d = src_dict.copy()
{% for property in model.required_properties + model.optional_properties %}
    {% if property.required %}
        {% set property_source = 'd.pop("' + property.name + '")' %}
    {% else %}
        {% set property_source = 'd.pop("' + property.name + '", UNSET)' %}
    {% endif %}
    {% import "property_templates/" + property.template as prop_template %}
    {% if prop_template.construct %}
        {{ prop_template.construct(property, property_source) | indent(8) }}
    {% else %}
        {{ property.python_name }} = {{ property_source }}
    {% endif %}

{% endfor %}
        {{ module_name }} = cls(
{% for property in model.required_properties + model.optional_properties %}
            {{ property.python_name }}={{ property.python_name }},
{% endfor %}
        )

{% if model.additional_properties %}
    {% if model.additional_properties.template %}{# Can be a bool instead of an object #}
        {% import "property_templates/" + model.additional_properties.template as prop_template %}

{% if model.additional_properties.lazy_imports %}
    {% for lazy_import in model.additional_properties.lazy_imports %}
        {{ lazy_import }}
    {% endfor %}
{% endif %}
    {% else %}
        {% set prop_template = None %}
    {% endif %}
    {% if prop_template and prop_template.construct %}
        additional_properties = {}
        for prop_name, prop_dict in d.items():
            {{ prop_template.construct(model.additional_properties, "prop_dict") | indent(12) }}
            additional_properties[prop_name] = {{ model.additional_properties.python_name }}

        {{ module_name }}.additional_properties = additional_properties
    {% else %}
        {{ module_name }}.additional_properties = d
    {% endif %}
{% endif %}
        return {{ module_name }}

    {% if model.additional_properties %}
    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> {{ additional_property_type }}:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: {{ additional_property_type }}) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
    {% endif %}
